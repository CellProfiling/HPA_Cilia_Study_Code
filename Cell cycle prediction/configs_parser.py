import argparse

def get_default_config():
    parser = argparse.ArgumentParser()  
    parser.add_argument('--phase', type=str, default='train', help='train or test or inference phase')
    parser.add_argument('--architecture', type=str, default='DPNUNet', help='Model architecture')
    parser.add_argument('--batch_size', type=int, default=16, help='batch size')
    parser.add_argument('--iter_size', type=int, default=1, help='number of iterations')
    parser.add_argument('--folder', default='dpn_unet_f0', help='folder path where outputs, weights and logs are saved')
    parser.add_argument('--dataset_path', type=str, default='/imjoy/imjoy-paper/data-science-bowl/dsb2018-dataset-v0.1.1', help='dataset path')
    parser.add_argument('--input_channel_files', default="microtubule.png,None,nuclei.png", help='input channel file name')
    parser.add_argument('--target_channel_files', default=["label.png"], help='target channel file name(s)')
    parser.add_argument('--lr', default=5e-5, help='initial learning rate')
    parser.add_argument('--lr_steps', default=[[8, 1e-5], [12, 5e-6], [15, 1e-6]], help='lr steps when using LRStepScheduler()')
    parser.add_argument('--lr_gamma', default=0.9, help='lr decay rate')
    parser.add_argument('--nb_epoch', default=20, help='number of epochs')
    parser.add_argument('--input_channel_num', default=3, help='number of input channels')
    parser.add_argument('--target_channel_num', default=1, help='number of target channels')
    parser.add_argument('--ignore_target_size', type=bool, default=True, help='if True, validation images will be scaled and cropped to the same size as training patches')
    parser.add_argument('--test_pad', default=0, help='px for padding')
    parser.add_argument('--epoch_size', default=24, help='epoch size')
    parser.add_argument('--predict_batch_size', default=1, help='batch size for prediction')
    parser.add_argument('--weights_dir', default='../weights', help='path to save weights')
    parser.add_argument('--logs_dir', default='../logs', help='path to save logs')
    parser.add_argument('--outputs_dir', default='../logs', help='path to save (training) outputs')
    parser.add_argument('--target_cols', default=512, help='(col) size of training patch')
    parser.add_argument('--network', default='dpn', help='network architecture')
    parser.add_argument('--loss', default={"type": "bce", "ce": 0.6, "dice_body": 0.2, "dice_border": 0.2}, help='loss function')
    parser.add_argument('--optimizer', default='adam', help='optimizer')
    parser.add_argument('--warmup', default=0, help='Number of epochs to train with pretrained weights freezed')
    parser.add_argument('--activation', default='softmax', help='activation function, support softmax, linear, etc.')
    parser.add_argument('--scale_factor', default=1, help='scale factor for images')
    parser.add_argument('--load_model_from', default=None, help='path to load pretrained model')
    parser.add_argument('--num_workers', default=1, help='Number of workers')
    parser.add_argument('--gpu_ids', default=None, help='specify gpu id(s), list of integer format')
    parser.add_argument('--device', default='cpu', help='cpu or gpu to run model')
    parser.add_argument('--save_interval', default=50, help='epoch interval to save intermediate outputs')
    parser.add_argument('--training_augmentations', default='victor', help='augmenter for training images, currently support victor or binarized')
    parser.add_argument('--inputs_preprocessing', default='min-max', help='preprocessing of input image')
    parser.add_argument('--targets_preprocessing', default='bit-depth', help='preprocessing of target image')

    return parser.parse_args()